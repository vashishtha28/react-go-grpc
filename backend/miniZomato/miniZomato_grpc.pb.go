// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddGetRestaurantClient is the client API for AddGetRestaurant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddGetRestaurantClient interface {
	// Obtains the restaurants available within the database.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the database contain a
	// huge number of restaurants.
	ListRestaurants(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*RestaurantList, error)
	AddRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*AddedConfirmation, error)
	NoRepeatValidation(ctx context.Context, in *NameAddressToken, opts ...grpc.CallOption) (*Uniqueness, error)
	GetTotalPosts(ctx context.Context, in *TotalPosts, opts ...grpc.CallOption) (*TotalPosts, error)
}

type addGetRestaurantClient struct {
	cc grpc.ClientConnInterface
}

func NewAddGetRestaurantClient(cc grpc.ClientConnInterface) AddGetRestaurantClient {
	return &addGetRestaurantClient{cc}
}

func (c *addGetRestaurantClient) ListRestaurants(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*RestaurantList, error) {
	out := new(RestaurantList)
	err := c.cc.Invoke(ctx, "/miniZomato.Add_get_restaurant/ListRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addGetRestaurantClient) AddRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*AddedConfirmation, error) {
	out := new(AddedConfirmation)
	err := c.cc.Invoke(ctx, "/miniZomato.Add_get_restaurant/AddRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addGetRestaurantClient) NoRepeatValidation(ctx context.Context, in *NameAddressToken, opts ...grpc.CallOption) (*Uniqueness, error) {
	out := new(Uniqueness)
	err := c.cc.Invoke(ctx, "/miniZomato.Add_get_restaurant/NoRepeatValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addGetRestaurantClient) GetTotalPosts(ctx context.Context, in *TotalPosts, opts ...grpc.CallOption) (*TotalPosts, error) {
	out := new(TotalPosts)
	err := c.cc.Invoke(ctx, "/miniZomato.Add_get_restaurant/GetTotalPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddGetRestaurantServer is the server API for AddGetRestaurant service.
// All implementations must embed UnimplementedAddGetRestaurantServer
// for forward compatibility
type AddGetRestaurantServer interface {
	// Obtains the restaurants available within the database.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the database contain a
	// huge number of restaurants.
	ListRestaurants(context.Context, *GetListRequest) (*RestaurantList, error)
	AddRestaurant(context.Context, *Restaurant) (*AddedConfirmation, error)
	NoRepeatValidation(context.Context, *NameAddressToken) (*Uniqueness, error)
	GetTotalPosts(context.Context, *TotalPosts) (*TotalPosts, error)
	mustEmbedUnimplementedAddGetRestaurantServer()
}

// UnimplementedAddGetRestaurantServer must be embedded to have forward compatible implementations.
type UnimplementedAddGetRestaurantServer struct {
}

func (UnimplementedAddGetRestaurantServer) ListRestaurants(context.Context, *GetListRequest) (*RestaurantList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestaurants not implemented")
}
func (UnimplementedAddGetRestaurantServer) AddRestaurant(context.Context, *Restaurant) (*AddedConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRestaurant not implemented")
}
func (UnimplementedAddGetRestaurantServer) NoRepeatValidation(context.Context, *NameAddressToken) (*Uniqueness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoRepeatValidation not implemented")
}
func (UnimplementedAddGetRestaurantServer) GetTotalPosts(context.Context, *TotalPosts) (*TotalPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPosts not implemented")
}
func (UnimplementedAddGetRestaurantServer) mustEmbedUnimplementedAddGetRestaurantServer() {}

// UnsafeAddGetRestaurantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddGetRestaurantServer will
// result in compilation errors.
type UnsafeAddGetRestaurantServer interface {
	mustEmbedUnimplementedAddGetRestaurantServer()
}

func RegisterAddGetRestaurantServer(s grpc.ServiceRegistrar, srv AddGetRestaurantServer) {
	s.RegisterService(&AddGetRestaurant_ServiceDesc, srv)
}

func _AddGetRestaurant_ListRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddGetRestaurantServer).ListRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniZomato.Add_get_restaurant/ListRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddGetRestaurantServer).ListRestaurants(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddGetRestaurant_AddRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restaurant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddGetRestaurantServer).AddRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniZomato.Add_get_restaurant/AddRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddGetRestaurantServer).AddRestaurant(ctx, req.(*Restaurant))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddGetRestaurant_NoRepeatValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameAddressToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddGetRestaurantServer).NoRepeatValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniZomato.Add_get_restaurant/NoRepeatValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddGetRestaurantServer).NoRepeatValidation(ctx, req.(*NameAddressToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddGetRestaurant_GetTotalPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddGetRestaurantServer).GetTotalPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniZomato.Add_get_restaurant/GetTotalPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddGetRestaurantServer).GetTotalPosts(ctx, req.(*TotalPosts))
	}
	return interceptor(ctx, in, info, handler)
}

// AddGetRestaurant_ServiceDesc is the grpc.ServiceDesc for AddGetRestaurant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddGetRestaurant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miniZomato.Add_get_restaurant",
	HandlerType: (*AddGetRestaurantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRestaurants",
			Handler:    _AddGetRestaurant_ListRestaurants_Handler,
		},
		{
			MethodName: "AddRestaurant",
			Handler:    _AddGetRestaurant_AddRestaurant_Handler,
		},
		{
			MethodName: "NoRepeatValidation",
			Handler:    _AddGetRestaurant_NoRepeatValidation_Handler,
		},
		{
			MethodName: "GetTotalPosts",
			Handler:    _AddGetRestaurant_GetTotalPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miniZomato/miniZomato.proto",
}
